@using BlazorAthenaFrontend.Models
@inject HttpClient httpClient
@using System.Security.Claims
@using BlazorAthenaFrontend.Services;
@inject BlazorAthenaFrontend.Services.TokenService TokenService
@inject BlazorAthenaFrontend.Services.JwtDecoderService JwtDecoderService

@page "/MyOrders"
@code {
    private List<Order> usersOrderList;
    private List<Product> productList;
    private List<OrderLine> orderLineList;
    private List<Order> pendingOrders;
    private int selectedProductId { get; set; }
    private int selectedQuantity { get; set; }
    private int selectedOrderId { get; set; }

    private async Task UpdateOrderComment(Order order)
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"https://localhost:7088/api/Order/{order.ID}", order);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Order comment updated successfully!");
            }
            else
            {
                Console.WriteLine($"Failed to update order comment. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating order comment: {ex.Message}");
        }
    }

    private void AddProductToOrder()
    {
        // Check if a product is selected

        if (selectedOrderId != 0 && selectedProductId != 0 && selectedQuantity > 0)
        {
            // Find the selected order
            var selectedOrder = pendingOrders.FirstOrDefault(o => o.ID == selectedOrderId);

            if (selectedOrder != null)
            {
                // Get the selected product
                var selectedProduct = productList.FirstOrDefault(p => p.ID == selectedProductId);

                // Create a new OrderLine
                var newOrderLine = new OrderLine
                    {
                        ProductID = selectedProduct.ID,
                        Quantity = selectedQuantity,
                        OrderID = selectedOrder.ID
                        // You may need to set other properties of the OrderLine
                    };

                // Add the new OrderLine to the selected order
                selectedOrder.OrderLines.Add(newOrderLine);

                // Optionally, clear the selection after adding the product
                selectedProductId = 0;
                selectedQuantity = 0;

                //AddNewOrderLine(newOrderLine);
                SendOrderLine(newOrderLine);
            }
        }
    }
    
    private async Task AddNewOrderLine(OrderLine orderLine)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync($"https://localhost:7088/api/OrderLine/AddOrderLine", orderLine);


            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Order line added successfully!");
            }
            else
            {
                Console.WriteLine($"Failed to add order line. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding order line: {ex.Message}");
        }
    } //funkar EJ

    private async Task SendOrderLine(OrderLine orderLine)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("https://localhost:7088/api/OrderLine", orderLine);

            // Check if the request was successful
            if (!response.IsSuccessStatusCode)
            {
                // Handle the case where the request was not successful
                Console.WriteLine($"Error placing order line. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions that might occur during the HTTP request
            Console.WriteLine($"Error placing order line: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var jwtToken = TokenService.Token;
        var currentUser = CurrentUserService.GetCurrentUserFromToken(jwtToken);

        var orderList = await httpClient.GetFromJsonAsync<List<Order>>("https://localhost:7088/api/Order");
        productList = await httpClient.GetFromJsonAsync<List<Product>>("https://localhost:7088/api/Product");
        orderLineList = await httpClient.GetFromJsonAsync<List<OrderLine>>("https://localhost:7088/api/OrderLine");

        usersOrderList = orderList
            .Where(order => order.UserID == currentUser && order.Accepted == true)
            .ToList();

        // Fetch OrderLines and associated Products for each order
        foreach (var order in usersOrderList)
        {
            order.OrderLines = orderLineList
                .Where(orderLine => orderLine.OrderID == order.ID)
                .ToList();

            // Fetch Product details for each OrderLine
            foreach (var orderLine in order.OrderLines)
            {
                orderLine.Product = productList
                    .FirstOrDefault(product => product.ID == orderLine.ProductID);
            }

        }

        // Fetch pending orders
        pendingOrders = orderList
            .Where(order => order.UserID == currentUser && order.Accepted == false)
            .ToList();
    }
}

@if (usersOrderList != null)
{
    <!-- Accordion for Accepted Orders -->
    <style>
        .accordion {
            display: flex;
            flex-direction: column;
            width: 300px;
        }

        .accordion-item {
            border: 1px solid purple;
            margin-bottom: 5px;
        }

        .accordion-header {
            padding: 10px;
            background-color: #f1f1f1;
            cursor: pointer;
        }

        .accordion-content {
            display: none;
            padding: 10px;
        }
    </style>
    <div class="accordion">
        @foreach (var order in usersOrderList)
        {
            <div class="accordion-item">
                <div class="accordion-header" onclick="toggleAccordion(this)">
                    Receipt nr#: @order.ID Date: @order.TimeStamp.ToString("yyyy-MM-dd HH:mm:ss")
                </div>
                <div class="accordion-content">
                    @foreach (var orderLine in order.OrderLines)
                    {
                        <p>
                            @orderLine.Product.Name, Quantity: @orderLine.Quantity
                            <br />Price per product: @orderLine.Product.Price
                            <br>VAT @orderLine.Product.VAT%
                        </p>
                    }
                    <p>Total Amount: @order.SaleAmount SEK</p>
                </div>
            </div>
        }
    </div>

    <!-- Accordion for Pending Orders -->
    <div class="accordion">
        @foreach (var order in pendingOrders)
        {
            selectedOrderId = order.ID;
            <div class="accordion-item">
                <div class="accordion-header" onclick="toggleAccordion(this)">
                    Pending Order nr#: @order.ID Date: @order.TimeStamp.ToString("yyyy-MM-dd HH:mm:ss")
                </div>
                <div class="accordion-content">
                    <p>Comment: @order.Comment</p>
                    <label for="commentInput">Update Comment:</label>
                    <input type="text" id="commentInput" @bind="order.Comment" />
                    <button @onclick="() => UpdateOrderComment(order)">Update Comment</button>

                    <label for="productDropdown">Select Product:</label>
                    <select id="productDropdown" @bind="selectedProductId">
                        <option value="">-- Select Product --</option>
                        @foreach (var product in productList)
                        {
                            <option value="@product.ID">@product.Name</option>
                        }
                    </select>
                    <label for="quantityInput">Quantity:</label>
                    <input type="number" id="quantityInput" @bind="selectedQuantity" />
                    <button @onclick="AddProductToOrder">Add Product to Order</button>

                </div>
            </div>
        }
    </div>

    <script>
        function toggleAccordion(element) {
            var content = element.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        }
    </script>
}
else
{
    <p>Loading...</p>
}
