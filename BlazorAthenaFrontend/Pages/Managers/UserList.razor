@page "/users"
@using BlazorAthenaFrontend.Services
@using BlazorAthenaFrontend.Data.Identity
@using Microsoft.JSInterop
@using BlazorAthenaFrontend.Models
@using System.Net.Http.Headers;
@inject TokenService TokenService
@inject HttpClient Http
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>User Roles</h3>

@if (usersWithRoles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Role</th>
                <th>Create</th>
                <th>Delete</th> <!-- New column for Delete button -->
            </tr>
        </thead>
        <tbody>
            @foreach (var userRole in usersWithRoles)
            {
                <tr>
                    <td>@userRole.Email</td>
                    <td>@userRole.Roles</td>
                    <td>
                        <button @onclick="() => EditUser(userRole.UserId)">Edit</button>
                    </td>
                    <td>
                        <button @onclick="() => DeleteUser(userRole.UserId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Button for creating a new user -->
    <button @onclick="CreateUser">Create New User</button>
}

@code {
    private List<GetUserRoleModel> usersWithRoles;

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient { BaseAddress = new Uri("https://localhost:7088") };
        usersWithRoles = await UserService.FetchUsersAsync();
    }

    private void EditUser(string userId)
    {
        NavigationManager.NavigateTo($"/edituser/{userId}");
    }
    private void SetJwtToken()
    {
        // Get the JWT token from your static TokenService
        var jwtToken = TokenService.Token;

        // Set the Authorization header with the JWT token
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
    }


    private async Task DeleteUser(string userId)
    {
        // Show a confirmation dialog using JavaScript
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");

        if (confirmDelete)
        {
            try
            {
                // Set JWT token in headers
                SetJwtToken();
                // Make a DELETE request to the API endpoint
                await Http.DeleteAsync($"https://localhost:7088/api/User/{userId}");

                // After deleting, refresh the user list
                usersWithRoles = await UserService.FetchUsersAsync();
            }
            catch (Exception ex)
            {
                // Handle error, display a message, or log
                Console.WriteLine($"Error deleting user: {ex.Message}");
            }
        }
    }

    private async Task CreateUser()
    {
        try
        {
            // Set JWT token in headers
            SetJwtToken();
            // Get user input for creating a new user
            var email = await JSRuntime.InvokeAsync<string>("prompt", "Enter email:");
            var password = await JSRuntime.InvokeAsync<string>("prompt", "Enter password:");
            var role = await JSRuntime.InvokeAsync<string>("prompt", "Enter role:");

            // Create a new CreateUserModel with the user input
            var createUserModel = new CreateUserModel
                {
                    Email = email,
                    Password = password,
                    Role = role
                };


            // Make a POST request to the API endpoint with the CreateUserModel
            var response = await Http.PostAsJsonAsync("https://localhost:7088/api/User", createUserModel);

            var content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response content: {content}");

            if (response.IsSuccessStatusCode)
            {
                // Get the user ID from the response if needed
                var userId = await response.Content.ReadFromJsonAsync<string>();

                // Optionally, you can navigate to the user details page or take other actions
                NavigationManager.NavigateTo($"/userdetails/{userId}");
            }
            else
            {
                // Handle error, display a message, or log
                Console.WriteLine($"Error creating user. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle other exceptions
            Console.WriteLine($"Error creating user: {ex.Message}");
        }
    }
}
