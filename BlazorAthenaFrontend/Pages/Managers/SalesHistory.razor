@page "/SalesHistory"
@attribute [Authorize(Roles = "Manager")]
@inject BlazorAthenaFrontend.Services.TokenService TokenService
@inject System.Net.Http.HttpClient HttpClient
@using BlazorAthenaFrontend.Models
@using System.Net.Http.Headers;

<h3>Sales History</h3>

<div>
    <label>Select Date Range:</label>
    <input type="date" @bind="startDate" />
    <input type="date" @bind="endDate" />
    <button @onclick="FilterSales">Apply</button>
</div>

@if (salesHistory == null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var groupedSale in salesHistoryGrouped)
        {
            <li>
                Order ID: @groupedSale.Key
                <ul>
                    @foreach (var sale in groupedSale)
                    {
                        <li>
                            Product: @sale.Product.Name
                            Quantity: @sale.OrderLine.Quantity
                            Order Timestamp: @sale.Order.TimeStamp
                        </li>
                    }
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<Order> orders;
    private List<OrderLine> orderLines;
    private List<Product> products;
    private List<SaleDetails> salesHistory;

    // Date range filters
    private DateTime? startDate;
    private DateTime? endDate;

    // Grouped sales history
    private List<IGrouping<int, SaleDetails>> salesHistoryGrouped;

    protected override async Task OnInitializedAsync()
    {
        await LoadSalesHistory();
    }

    private async Task LoadSalesHistory()
    {
        try
        {
            var jwtToken = TokenService.Token;

            // Set the Authorization header with the JWT token
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);

            // Make a GET request to the "GetAllOrders" endpoint
            orders = await HttpClient.GetFromJsonAsync<List<Order>>("https://localhost:7088/api/Order");

            // Make a GET request to the "GetAllOrderLine" endpoint
            orderLines = await HttpClient.GetFromJsonAsync<List<OrderLine>>("https://localhost:7088/api/OrderLine");

            // Make a GET request to the "GetAllProducts" endpoint
            products = await HttpClient.GetFromJsonAsync<List<Product>>("https://localhost:7088/api/Product");

            // Filter sales history based on date range
            FilterSales();
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., log or display an error message)
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void FilterSales()
    {
        // Filter sales history based on the selected date range
        salesHistory = orders
            .SelectMany(order => orderLines
                .Where(ol => ol.OrderID == order.ID)
                .Select(orderLine => new SaleDetails
                    {
                        Order = order,
                        OrderLine = orderLine,
                        Product = products.FirstOrDefault(p => p.ID == orderLine.ProductID)
                    }))
            .Where(sale =>
                (!startDate.HasValue || sale.Order.TimeStamp.Date >= startDate.Value.Date) &&
                (!endDate.HasValue || sale.Order.TimeStamp.Date <= endDate.Value.Date))
            .ToList();

        // Group sales history by Order.ID
        salesHistoryGrouped = salesHistory.GroupBy(sale => sale.Order.ID).ToList();
    }
}
